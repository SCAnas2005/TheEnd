


using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using MonoGame.Extended.Graphics;
using TheEnd;

public enum Animation {
    Idle,
    Right,
    Left,
    Up,
    Down,
    TakeDamageIdle,
    TakeDamageRight,
    TakeDamageLeft,
    TakeDamageUp
}

public class Player : Sprite, IDamageable, IWeaponUser
{
    private Dictionary<Animation, AnimationSprite> _animations;
    public Animation CurrentAnimation;
    public Inventory Inventory;
    public int ZombieKilled;


    public List<Zombies> zombies;

    public bool IsTakingDamage = false;
    private float DamageAnimationRate = 500; // 500ms
    private float DamageAnimationCoolDown = 0;

    public int Money = 0;

    private SoundEffect _footstepGrass;
    private double _footstepTimer = 0;
    private double _footstepInterval = 500; // en ms, adapte selon la vitesse du joueurs

    public bool CanUseItem = true;
    public bool CanSelectItem = true;
    public bool CanInteract = true;


    public Player(
        Rectangle rect,
        string src, string name,
        float speed, Map map, int health,
        Inventory inventory = null,
        int money = 0,
        bool debug = false
    ) : base(rect, src, speed, health, map: map, name: name, debug: debug)
    {
        _animations = [];
        CurrentAnimation = Animation.Idle;
        _speed = 3;

        ZombieKilled = 0;

        Inventory = inventory ?? new Inventory(5);
        Money = money;

        DrawDepth = 5;
    }

    public void SetNewMap(Map newMap)
    {
        Map = newMap;
        foreach (var item in Inventory.GetItems())
        {
            item.Map = Map;
            item.MapScene = Map.Scene;
        }
    }

    

    public void AddMoney(int amount)
    {
        Money += amount;
    }

    public void UpdateGunPosition()
    {
        foreach (var item in Inventory.GetItems())
        {
            if (item is Weapon)
            {
                item.Rect = new Rectangle(
                    x: _rect.X + Utils.GetValueByPercentage(_rect.Width, -7),
                    y: _rect.Y + Utils.GetValueByPercentage(_rect.Height, 38),
                    width: Utils.GetValueByPercentage(_rect.Width, 114),
                    height: Utils.GetValueByPercentage(_rect.Height, 31)
                );
            }
        }
    }

    public override void Load(ContentManager Content)
    {
        _texture = Content.Load<Texture2D>("Player/pp");

        AddAnimation(Animation.Idle, "Player/Idle/idle", 1, 100, 14, 15, 1, 1);
        AddAnimation(Animation.Right, "Player/WalkRight/walkright", 3, 100, 14, 15, 1, 3);
        AddAnimation(Animation.Down, "Player/WalkDown/walkdown", 2, 100, 14, 15, 1, 2);
        AddAnimation(Animation.Up, "Player/WalkUp/walkup", 3, 100, 14, 15, 1, 3);
        AddAnimation(Animation.Left, "Player/WalkLeft/walkleft", 3, 100, 14, 15, 1, 3);
        AddAnimation(Animation.TakeDamageIdle, "Player/Damage/idle", 1, 100, 14, 15, 1, 1);
        AddAnimation(Animation.TakeDamageUp, "Player/Damage/up", 1, 100, 14, 15, 1, 1);
        AddAnimation(Animation.TakeDamageRight, "Player/Damage/right", 1, 100, 14, 15, 1, 1);
        AddAnimation(Animation.TakeDamageLeft, "Player/Damage/left", 1, 100, 14, 15, 1, 1);


        foreach (var item in Inventory.GetItems())
        {
            item?.Load(Content);
        }

        _footstepGrass = Content.Load<SoundEffect>("sounds/sprites/human/footstep_grass");
    }

    public void AddAnimation(Animation a, string src, int frames, int frameTime, int width, int height, int LineNumber, int ColumnNumber, int LineIndex = 0, int ColumnIndex = 0, bool reverseFrame = false)
    {
        _animations[a] = new AnimationSprite(_rect, src, frames, frameTime, width, height, LineNumber, ColumnNumber, LineIndex, ColumnIndex, reverseFrame);
        _animations[a].Load(Globals.Content);
    }

    public void AddHealth(int newHealth)
    {
        Health += newHealth;
    }

    public Item DropItem()
    {
        return Inventory.RemoveSelectedItem();
    }

    public override void TakeDamage(int damage)
    {
        base.TakeDamage(damage);
        IsTakingDamage = true;
        DamageAnimationCoolDown = DamageAnimationRate;
    }


    public void UpdateDamageAnimation(GameTime gameTime)
    {
        if (DamageAnimationCoolDown > 0)
        {
            DamageAnimationCoolDown -= (float)gameTime.ElapsedGameTime.TotalMilliseconds;
        }
        else
        {
            DamageAnimationCoolDown = DamageAnimationRate;
            IsTakingDamage = false;
        }
    }




    public override void Update(GameTime gameTime)
    {
        // Réinitialise les directions
        _dX = 0;
        _dY = 0;

        // Gestion verticale
        if (CanMove)
        {
            if (InputManager.IsHolding(Keys.S))
            {
                _dY = 1;
            }
            else if (InputManager.IsHolding(Keys.Z))
            {
                _dY = -1;
            }
            // Gestion horizontale
            if (InputManager.IsHolding(Keys.D))
            {
                _dX = 1;
                if (Inventory.SelectedItem != null && Inventory.SelectedItem is Weapon)
                {
                    ((Weapon)Inventory.SelectedItem).DirectionX = _dX;
                }
            }
            else if (InputManager.IsHolding(Keys.Q))
            {
                _dX = -1;
                if (Inventory.SelectedItem != null && Inventory.SelectedItem is Weapon)
                {
                    ((Weapon)Inventory.SelectedItem).DirectionX = _dX;
                }
            }

            _footstepTimer -= (float)gameTime.ElapsedGameTime.TotalMilliseconds;

            if ((_dX != 0 || _dY != 0) && _footstepTimer <= 0f)
            {
                if (Map.IsInGrass(Position)) // ← ta fonction déjà codée
                {
                    AudioManager.Play(_footstepGrass, volume: 0.2f); // ou .Play("grass") si tu l’as enregistré par string
                    _footstepTimer = _footstepInterval;
                }
            }

        }

        // Détermine l'animation en fonction de la direction prioritaire
        if (_dX == 0 && _dY == 0)
        {
            CurrentAnimation = !IsTakingDamage ? Animation.Idle : Animation.TakeDamageIdle;
        }
        else if (_dX != 0)
        {
            CurrentAnimation = (_dX > 0) ? !IsTakingDamage ? Animation.Right : Animation.TakeDamageRight : !IsTakingDamage ? Animation.Left : Animation.TakeDamageLeft;
        }
        else if (_dY != 0)
        {
            CurrentAnimation = (_dY > 0) ? Animation.Down : !IsTakingDamage ? Animation.Up : Animation.TakeDamageUp;
        }

        float vx = _dX * _speed;
        float vy = _dY * _speed;

        TryMove(Map, vx, vy);
        UpdateGunPosition();

        _animations[CurrentAnimation].Update(gameTime);
        Inventory.UpdateSelectedItem(gameTime);
        if (IsTakingDamage)
        {
            UpdateDamageAnimation(gameTime);
        }

        if (CanMove && CanSelectItem)
        {
            if (InputManager.IsPressed(Keys.L))
            {
                DropItem();
            }
            for (int i = 1; i <= 5; i++)
            {
                Keys key = (Keys)((int)Keys.NumPad0 + i);
                Keys key2 = (Keys)((int)Keys.D0 + i);
                if (InputManager.IsPressed(key) || InputManager.IsPressed(key2))
                {
                    if (Inventory.SelectedItemIndex != i - 1)
                    {
                        Inventory.SetIndex(i - 1);
                    }
                    break;
                }
            }
        }

        if (InputManager.IsPressed(Keys.I))
        {
            Inventory.PrintInventory();
        }
    }

    public void DrawPosition(SpriteBatch _spriteBatch)
    {
        Text.Write(_spriteBatch, $"x/y: {(_rect.X, _rect.Y)}, map:{_mapPos}", Vector2.Zero, Color.Blue);
    }


    public override void Draw(SpriteBatch _spriteBatch)
    {
        _animations[CurrentAnimation].Draw(_spriteBatch, _rect);

        DrawDebug(_spriteBatch);
        if (IsCollision)
        {
            Shape.DrawRectangle(_spriteBatch, _rect, Color.Blue);
        }
        Inventory.DrawSelectedItem(_spriteBatch);
    }

    
}